{"version":3,"sources":["MyComponent.tsx","index.tsx"],"names":["DiffType","defaultActionableTextStyling","display","borderStyle","cursor","addedDiffStyling","background","borderRadius","padding","overflow","removeDiffStyling","textDecoration","ActionableDiff","diffAction","children","usePopperTooltip","trigger","interactive","getArrowProps","getTooltipProps","setTooltipRef","setTriggerRef","visible","ref","type","style","ADD","className","alignItems","onClick","e","paddingLeft","paddingRight","borderColor","color","marginLeft","MyComponent","state","overrideText","render","diff","props","args","theme","border","outline","map","diffPart","edit","substring","NO_ACTION","setState","prevState","Streamlit","setComponentValue","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"4LAaKA,E,iJAAAA,O,yBAAAA,I,aAAAA,I,oBAAAA,M,KAML,IAAMC,EAA+B,CACnCC,QAAS,eACTC,YAAa,OACbC,OAAQ,WAGJC,EAAgB,2BACjBJ,GADiB,IAEpBK,WAAY,qBACZC,aAAc,UACdC,QAAS,kBACTC,SAAU,WAGNC,EAAiB,2BAClBT,GADkB,IAErBK,WAAY,qBACZC,aAAc,UACdC,QAAS,kBACTC,SAAU,SACVE,eAAgB,iBAQZC,EAAyD,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,WAAYC,EAAuB,EAAvBA,SAC3E,GADkG,iBAO9FC,YAAiB,CACnBC,QAAS,QACTC,aAAa,KAPbC,EADF,EACEA,cACAC,EAFF,EAEEA,gBACAC,EAHF,EAGEA,cACAC,EAJF,EAIEA,cACAC,EALF,EAKEA,QAMF,OACE,oCACE,4BAAQC,IAAKF,EACbG,KAAK,SACLC,MAAOZ,IAAeb,EAAS0B,IAAMrB,EAAmBK,GACrDI,GAGFQ,GACC,uCACEC,IAAKH,GACDD,EAAgB,CAAEQ,UAAW,uBAEjC,wBAAST,EAAc,CAAES,UAAW,mBACpC,yBAAKF,MAAO,CACVjB,QAAS,SACTN,QAAS,OACT0B,WAAY,WAEZ,6BACE,4BAAQC,QAAS,SAACC,KAEfL,MAAO,CACRM,YAAa,SACbC,aAAc,SACd1B,WAAY,UACZH,YAAa,QACb8B,YAAa,yBACb1B,aAAc,UACd2B,MAAO,qBATT,WAYF,6BACE,4BAAQT,MAAO,CACbM,YAAa,SACbC,aAAc,SACd1B,WAAY,UACZH,YAAa,QACb8B,YAAa,yBACb1B,aAAc,UACd2B,MAAO,QACPC,WAAY,WARd,eAsBRC,E,4MACGC,MAAQ,CAAEC,aAAc,M,EAExBC,OAAS,WAGd,IAAMC,EAA+B,EAAKC,MAAMC,KAAX,KAM/BjB,EAA6B,GAInC,GALkB,EAAKgB,MAAfE,MAKG,CAITlB,EAAMmB,OADgB,iBAEtBnB,EAAMoB,QAFgB,iBAUxB,OACE,6BACE,2BACI,EAAKR,MAAMC,aAcV,EAAKD,MAAMC,aAbZE,EAAKM,KAAI,SAACC,GACR,kBAA0BA,EAA1B,GAAOC,EAAP,KAAaC,EAAb,KAEA,OAAKD,IAAShD,EAASkD,UAEnB,8BAAOD,GAIP,kBAAC,EAAD,CAAgBpC,WAAYmC,GAAmBC,OAMvD,EAAKZ,MAAMC,aAoCT,KAnCJ,oCACA,4BACET,QAAS,WACP,EAAKsB,UACH,SAAAC,GAAS,MAAK,CAAEd,aAAc,EAAKG,MAAMC,KAAX,aAC9B,kBAAMW,IAAUC,mBAAkB,OAGtC7B,MAAO,CACLM,YAAa,SACbC,aAAc,SACd1B,WAAY,UACZH,YAAa,QACb8B,YAAa,yBACb1B,aAAc,UACd2B,MAAO,UAdX,kBAgBA,4BACEL,QAAS,WACP,EAAKsB,UACH,SAAAC,GAAS,MAAK,CAAEd,aAAc,EAAKG,MAAMC,KAAX,kBAC9B,kBAAMW,IAAUC,mBAAkB,OAGtC7B,MAAO,CACLU,WAAW,UACXJ,YAAa,SACbC,aAAc,SACd1B,WAAY,UACZH,YAAa,QACb8B,YAAa,yBACb1B,aAAc,UACd2B,MAAO,qBAfX,qB,yBAlEkBqB,KAyGXC,cAAwBpB,GCvNvCqB,IAASlB,OACP,kBAAC,IAAMmB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.360eb824.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode, useState, FunctionComponent } from \"react\"\nimport { usePopperTooltip } from 'react-popper-tooltip';\nimport 'react-popper-tooltip/dist/styles.css';\n\ninterface State {\n  overrideText: string | null\n}\n\nenum DiffType {\n  NO_ACTION = 0,\n  ADD = 1,\n  REMOVE = 2\n}\n\nconst defaultActionableTextStyling = {\n  display: 'inline-block',\n  borderStyle: 'none',\n  cursor: 'pointer'\n}\n\nconst addedDiffStyling = {\n  ...defaultActionableTextStyling,\n  background: \"rgb(170, 255, 170)\",\n  borderRadius: \"0.33rem\",\n  padding: \"0.125rem 0.5rem\",\n  overflow: \"hidden\"\n}\n\nconst removeDiffStyling = {\n  ...defaultActionableTextStyling,\n  background: \"rgb(255, 170, 170)\",\n  borderRadius: \"0.33rem\",\n  padding: \"0.125rem 0.5rem\",\n  overflow: \"hidden\",\n  textDecoration: \"line-through\"\n}\n\n\ninterface ActionableDiffProps {\n  diffAction: DiffType\n}\n\nconst ActionableDiff: FunctionComponent<ActionableDiffProps> = ({diffAction, children, ...rest}) => {\n  const {\n    getArrowProps,\n    getTooltipProps,\n    setTooltipRef,\n    setTriggerRef,\n    visible,\n  } = usePopperTooltip({\n    trigger: 'click',\n    interactive: true,\n  });\n\n  return (\n    <>\n      <button ref={setTriggerRef}\n      type=\"button\" \n      style={diffAction === DiffType.ADD ? addedDiffStyling : removeDiffStyling}> \n        {children}\n      </button>\n\n      {visible && (\n        <div\n          ref={setTooltipRef}\n          {...getTooltipProps({ className: 'tooltip-container' })}\n        >\n          <div {...getArrowProps({ className: 'tooltip-arrow' })} />\n          <div style={{\n            padding: '0.5rem',\n            display: \"flex\",\n            alignItems: \"center\"\n          }}>\n            <div>\n              <button onClick={(e) => {\n\n              }} style={{\n                paddingLeft: \"0.5rem\",\n                paddingRight: \"0.5rem\",\n                background: \"#f6f8fa\",\n                borderStyle: \"solid\",\n                borderColor: \"rgba(27, 31, 36, 0.15)\",\n                borderRadius: \"0.33rem\",\n                color: \"rgb(217, 78, 88)\"\n              }}>Ignore</button>\n            </div>\n            <div>\n              <button style={{\n                paddingLeft: \"0.5rem\",\n                paddingRight: \"0.5rem\",\n                background: \"#2da44e\",\n                borderStyle: \"solid\",\n                borderColor: \"rgba(27, 31, 36, 0.15)\",\n                borderRadius: \"0.33rem\",\n                color: \"white\",\n                marginLeft: \"0.5rem\",\n              }}>Accept</button>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { overrideText: null }\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const diff: (string|DiffType)[][]  = this.props.args[\"diff\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = \"1px solid gray\"\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n\n    return (\n      <div>\n        <p>\n          {!this.state.overrideText ? (\n            diff.map((diffPart) => {\n              const [edit, substring] = diffPart\n\n              if ( edit === DiffType.NO_ACTION ) {\n                return (\n                  <span>{substring}</span>\n                )\n              } else {\n                return (\n                  <ActionableDiff diffAction={edit as DiffType}>{substring}</ActionableDiff>\n                )\n              }\n            })\n          ): this.state.overrideText}\n        </p>\n        {!this.state.overrideText ? \n        <>\n        <button \n          onClick={() => {\n            this.setState(\n              prevState => ({ overrideText: this.props.args[\"new_text\"] }),\n              () => Streamlit.setComponentValue(true)\n            )\n          }}\n          style={{\n            paddingLeft: \"0.5rem\",\n            paddingRight: \"0.5rem\",\n            background: \"#2da44e\",\n            borderStyle: \"solid\",\n            borderColor: \"rgba(27, 31, 36, 0.15)\",\n            borderRadius: \"0.33rem\",\n            color: \"white\"\n          }}>Accept Changes</button>\n        <button \n          onClick={() => {\n            this.setState(\n              prevState => ({ overrideText: this.props.args[\"original_text\"] }),\n              () => Streamlit.setComponentValue(false)\n            )\n          }}\n          style={{\n            marginLeft:\" 0.5rem\",\n            paddingLeft: \"0.5rem\",\n            paddingRight: \"0.5rem\",\n            background: \"#f6f8fa\",\n            borderStyle: \"solid\",\n            borderColor: \"rgba(27, 31, 36, 0.15)\",\n            borderRadius: \"0.33rem\",\n            color: \"rgb(217, 78, 88)\"\n          }}>Ignore Changes</button>\n          </>\n          : null }\n      </div>\n    )\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  // private onClicked = (): void => {\n  //   // Increment state.numClicks, and pass the new value back to\n  //   // Streamlit via `Streamlit.setComponentValue`.\n  //   this.setState(\n  //     prevState => ({ numClicks: prevState.numClicks + 1 }),\n  //     () => Streamlit.setComponentValue(this.state.numClicks)\n  //   )\n  // }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MyComponent from \"./MyComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}